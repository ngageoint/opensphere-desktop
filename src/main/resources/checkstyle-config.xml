<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">

<module name="Checker">
	<property name="severity" value="${checkstyle.severity}"
		default="warning" />
	<property name="charset" value="UTF-8" />

	<!-- Suppress some warnings for certain files. -->
	<module name="SuppressionFilter">
		<property name="file" value="${checkstyle.suppressions.file}" />
	</module>
	<module name="SuppressionFilter">
		<!-- <property name="file" value="${project.checkstyle.suppressions.file}" /> -->
		<property name="file" value="${basedir}/project-checkstyle-suppressions.xml" />
	</module>

	<!-- Checks that a package-info.java file exists for each package. -->
	<!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage -->
	<module name="JavadocPackage" />

	<!-- Checks whether files end with a new line. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
	<module name="NewlineAtEndOfFile">
		<property name="lineSeparator" value="lf" />
	</module>


	<!-- Checks that property files contain the same keys. -->
	<!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
	<module name="Translation" />

	<!-- Checks for Size Violations. -->
	<!-- See http://checkstyle.sf.net/config_sizes.html -->
	<module name="FileLength" />

	<!-- Checks for whitespace -->
	<!-- See http://checkstyle.sf.net/config_whitespace.html -->
	<module name="FileTabCharacter" />

	<!-- Miscellaneous other checks. -->
	<!-- See http://checkstyle.sf.net/config_misc.html -->
	<module name="RegexpSingleline">
		<property name="format" value="\s+$" />
		<property name="message" value="Line has trailing spaces." />
	</module>
	<module name="RegexpSingleline">
		<property name="format" value="goat" />
		<property name="ignoreCase" value="true" />
		<property name="message" value="Line has one or more goats." />
		<property name="severity" value="info" />
	</module>
	<module name="RegexpSingleline">
		<property name="format" value="@author" />
		<property name="message" value="Line has an @author tag." />
	</module>
	<module name="RegexpSingleline">
		<property name="id" value="java.lang.ref" />
		<property name="format" value="java\.lang\.ref\." />
		<property name="message"
			value="Use io.opensphere.core.util.ref instead of java.lang.ref." />
	</module>
	<module name="RegexpSingleline">
		<property name="format" value="net.jcip.annotations" />
		<property name="message"
			value="Use javax.annotation.concurrent instead of net.jcip.annotations." />
		<property name="severity" value="warning" />
	</module>
	<module name="RegexpSingleline">
		<property name="format" value="com.bitsys.common.annotations" />
		<property name="message"
			value="Use javax.annotation.concurrent instead of com.bitsys.common.annotations." />
		<property name="severity" value="warning" />
	</module>
	<module name="RegexpSingleline">
		<property name="format" value="javax.help.UnsupportedOperationException" />
		<property name="message"
			value="You probably want java.lang.UnsupportedOperationException instead of javax.help.UnsupportedOperationException" />
		<property name="severity" value="warning" />
	</module>
	<module name="RegexpMultiline">
		<property name="format" value="\n\r*\n\r*\n" />
		<property name="message" value="Multiple blank lines." />
		<property name="severity" value="warning" />
	</module>
	<module name="RegexpMultiline">
		<property name="format" value="\{\r*\n\r*\n" />
		<property name="message" value="Open brace followed by blank line." />
		<property name="severity" value="warning" />
	</module>
	<module name="RegexpMultiline">
		<property name="format" value="\n\r*\n\r*\s*\}" />
		<property name="message" value="Closed brace preceded by blank line." />
		<property name="severity" value="warning" />
	</module>
	<!-- <module name="RegexpMultiline"> -->
	<!-- <property name="format" value="\s+//.{1,10}\r*\n\s+//.{1,10}\r*\n" 
		/> -->
	<!-- <property name="message" value="Use C-style comments." /> -->
	<!-- <property name="severity" value="warning" /> -->
	<!-- </module> -->
	<!-- <module name="RegexpSingleline"> -->
	<!-- <property name="format" value=" [a-z]_ " /> -->
	<!-- <property name="message" value="Ugly comments." /> -->
	<!-- <property name="severity" value="warning" /> -->
	<!-- </module> -->
	<!-- <module name="RegexpMultiline"> -->
	<!-- <property name="format" value="public void run\(\)\r*\n\s*\{\r*\n.{1,80}\r*\n\s*\}" 
		/> -->
	<!-- <property name="message" value="Use lambda." /> -->
	<!-- <property name="severity" value="warning" /> -->
	<!-- </module> -->

	<!-- Removed in Checkstyle 6.2 <module name="StrictDuplicateCode"> <property 
		name="min" value="20" /> <property name="severity" value="info" /> </module> 
		<module name="StrictDuplicateCode"> <property name="min" value="40" /> <property 
		name="severity" value="warning" /> </module> -->

	<module name="TreeWalker">

		<module name="Indentation" />

		<!-- Annotation Checks -->
		<!-- See http://checkstyle.sf.net/config_annotation.html -->
		<module name="MissingOverride" />

		<!-- Checks for Javadoc comments. -->
		<!-- See http://checkstyle.sf.net/config_javadoc.html -->
		<module name="JavadocMethod">
			<property name="allowUndeclaredRTE" value="true" />
			<property name="allowThrowsTagsForSubclasses" value="true" />

			<!-- Suppress load errors since Checkstyle doesn't -->
			<!-- appear to know how to load nested exception classes. -->
			<property name="logLoadErrors" value="true" />
			<property name="suppressLoadErrors" value="true" />
		</module>
		<module name="JavadocType" />
		<module name="JavadocVariable" />
		<module name="JavadocStyle">
			<property name="checkEmptyJavadoc" value="true" />
		</module>


		<!-- Checks for Naming Conventions. -->
		<!-- See http://checkstyle.sf.net/config_naming.html -->
		<module name="ConstantName">
			<property name="format" value="^[a-zA-Z0-9]*$|^[A-Z][a-zA-Z0-9_]*$" />
		</module>
		<module name="LocalFinalVariableName" />
		<module name="LocalVariableName">
			<property name="format" value="^(?!my|our)[a-zα-ωΑ-Ω][a-zA-Z0-9α-ωΑ-Ω]*$" />
		</module>
		<module name="MemberName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$" />
		</module>
		<module name="MethodName" />
		<module name="PackageName" />
		<module name="ParameterName" />
		<module name="StaticVariableName">
			<property name="format" value="^[a-z][a-zA-Z0-9]*$" />
		</module>

		<module name="TypeName" />


		<!-- Checks for Headers -->
		<!-- See http://checkstyle.sf.net/config_header.html -->
		<!-- <module name="Header"> -->
		<!-- The follow property value demonstrates the ability -->
		<!-- to have access to ANT properties. In this case it uses -->
		<!-- the ${basedir} property to allow Checkstyle to be run -->
		<!-- from any directory within a project. See property -->
		<!-- expansion, -->
		<!-- http://checkstyle.sf.net/config.html#properties -->
		<!-- <property -->
		<!-- name="headerFile" -->
		<!-- value="${basedir}/java.header"/> -->
		<!-- </module> -->

		<!-- Following interprets the header file as regular expressions. -->
		<!-- <module name="RegexpHeader"/> -->


		<!-- Checks for imports -->
		<!-- See http://checkstyle.sf.net/config_imports.html -->
		<module name="AvoidStarImport" />
		<module name="IllegalImport" /> <!-- defaults to sun.* packages -->
		<module name="RedundantImport" />
		<!-- <module name="UnusedImports" /> marks an import unused even if it's 
			in an @link -->

		<!-- Checks for metrics -->
		<!-- See http://checkstyle.sf.net/config_metrics.html -->
		<module name="BooleanExpressionComplexity">
			<property name="tokens" value="LAND, LOR" />
			<property name="max" value="6" />
		</module>
		<module name="ClassDataAbstractionCoupling">
			<property name="id" value="ClassDataAbstractionCouplingStrict" />
			<property name="max" value="20" />
			<property name="severity" value="warning" />
		</module>
		<module name="ClassDataAbstractionCoupling">
			<property name="id" value="ClassDataAbstractionCouplingLoose" />
			<property name="max" value="40" />
			<property name="severity" value="warning" />
		</module>
		<module name="ClassFanOutComplexity">
			<property name="max" value="50" />
			<property name="severity" value="info" />
		</module>
		<module name="ClassFanOutComplexity">
			<property name="max" value="65" />
			<property name="severity" value="warning" />
		</module>
		<module name="CyclomaticComplexity">
			<property name="max" value="40" />
		</module>
		<module name="NPathComplexity">
			<property name="severity" value="warning" />
		</module>
		<module name="JavaNCSS">
			<property name="severity" value="info" />
			<property name="methodMaximum" value="50" />
		</module>
		<module name="JavaNCSS">
			<property name="severity" value="warning" />
			<property name="methodMaximum" value="100" />
		</module>

		<!-- Checks for Size Violations. -->
		<!-- See http://checkstyle.sf.net/config_sizes.html -->
		<module name="LineLength">
			<property name="ignorePattern" value="^ *\* *[^ ]+$" />
			<property name="max" value="160" />
		</module>
		<module name="MethodLength" />
		<module name="ParameterNumber">
			<property name="max" value="7" />
			<property name="severity" value="info" />
		</module>
		<module name="ParameterNumber">
			<property name="max" value="10" />
			<property name="severity" value="warning" />
		</module>
		<module name="OuterTypeNumber" />

		<!-- Checks for whitespace -->
		<!-- See http://checkstyle.sf.net/config_whitespace.html -->
		<module name="EmptyForIteratorPad" />
		<module name="GenericWhitespace" />
		<module name="MethodParamPad" />
		<module name="NoWhitespaceAfter">
			<property name="tokens"
				value="BNOT, DEC, DOT, INC, LNOT, TYPECAST, UNARY_MINUS, UNARY_PLUS" />
		</module>
		<module name="NoWhitespaceBefore">
			<property name="allowLineBreaks" value="true" />
		</module>
		<module name="OperatorWrap" />
		<module name="ParenPad" />
		<module name="TypecastParenPad" />
		<module name="WhitespaceAfter">
			<property name="tokens" value="COMMA, SEMI" />
		</module>
		<module name="WhitespaceAround">
			<property name="tokens"
				value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND" />
		</module>


		<!-- Modifier Checks -->
		<!-- See http://checkstyle.sf.net/config_modifiers.html -->
		<module name="ModifierOrder" />
		<module name="RedundantModifier">
			<property name="tokens"
				value="METHOD_DEF, VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CLASS_DEF, ENUM_DEF" />
		</module>


		<!-- Checks for blocks. You know, those {}'s -->
		<!-- See http://checkstyle.sf.net/config_blocks.html -->
		<!-- <module name="AvoidNestedBlocks" /> sometimes blocks are nice for 
			switch cases. -->
		<module name="EmptyBlock">
			<property name="tokens"
				value="LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_IF, LITERAL_FOR, LITERAL_TRY, LITERAL_WHILE, INSTANCE_INIT, STATIC_INIT" />
		</module>
		<module name="LeftCurly">
			<property name="option" value="nl" />
		</module>
		<!-- <module name="NeedBraces" /> -->
		<module name="RightCurly">
			<property name="option" value="alone" />
		</module>


		<!-- Checks for common coding problems -->
		<!-- See http://checkstyle.sf.net/config_coding.html -->
		<!-- <module name="ArrayTrailingComma" /> -->
		<!-- <module name="AvoidInlineConditionals"/> -->
		<module name="EmptyStatement" />
		<!-- <module name="EqualsHashCode" /> covered by findbugs -->
		<module name="ExplicitInitialization" />
		<module name="HiddenField" />
		<module name="IllegalInstantiation" />
		<module name="IllegalThrows">
			<property name="illegalClassNames"
				value="Throwable, java.lang.Throwable, Error, java.lang.Error, RuntimeException, java.lang.RuntimeException" />
		</module>
		<module name="IllegalCatch">
			<property name="illegalClassNames" value="Throwable, java.lang.Throwable" />
		</module>
		<module name="IllegalCatch">
			<property name="illegalClassNames" value="Exception, java.lang.Exception" />
		</module>

		<module name="MagicNumber">
			<property name="tokens" value="NUM_DOUBLE, NUM_FLOAT, NUM_LONG" />
			<property name="ignoreNumbers"
				value="-270, -180, -90, -45, -2, -1, -.5, -0, 0, .5, 1, 2, 45, 90, 180, 270, 360" />
		</module>
		<module name="MissingSwitchDefault" />
		<module name="MultipleVariableDeclarations" />
		<!-- <module name="RedundantThrows"> <property name="allowUnchecked" value="true" 
			/> <property name="allowSubclasses" value="true" /> -->

		<!-- Suppress load errors since Checkstyle doesn't -->
		<!-- appear to know how to load nested exception classes. -->
		<!-- <property name="logLoadErrors" value="true" /> <property name="suppressLoadErrors" 
			value="true" /> </module> -->
		<module name="SimplifyBooleanExpression" />
		<module name="SimplifyBooleanReturn" />

		<!-- Checks for class design -->
		<!-- See http://checkstyle.sf.net/config_design.html -->
		<!-- <module name="DesignForExtension"/> -->
		<module name="FinalClass" />
		<module name="HideUtilityClassConstructor" />
		<module name="InterfaceIsType" />
		<!--<module name="VisibilityModifier" /> -->

		<!-- Disallow suppressing PMD.CompareObjectsWithEquals to force -->
		<!-- use of Utilities.sameInstance(). -->
		<module name="SuppressWarnings">
			<property name="format"
				value="^PMD\.(CompareObjectsWithEquals|SystemPrintln)$|^\s*$" />
		</module>

		<!-- Miscellaneous other checks. -->
		<!-- See http://checkstyle.sf.net/config_misc.html -->
		<module name="ArrayTypeStyle" />
		<!-- <module name="FinalParameters"/> -->
		<module name="TodoComment">
			<property name="format" value="FIXME" />
			<property name="severity" value="info" />
		</module>
		<module name="TodoComment">
			<property name="format" value="TODO Auto-generated" />
			<property name="severity" value="warning" />
		</module>
		<module name="UpperEll" />

		<module name="RegexpSinglelineJava">
			<property name="format"
				value="(?:[;}]|^)\s*(?:public\s+|protected\s+|private\s+|static\s+)*enum\s+(?![A-Z][a-zA-Z0-9]+\b)" />
			<property name="message"
				value="Enum typename does not match regex &quot;[A-Z][a-zA-Z0-9]+&quot;." />
			<property name="ignoreComments" value="true" />
		</module>

		<module name="RegexpSinglelineJava">
			<property name="format"
				value="\.equals\(&quot;&quot;\)|&quot;&quot;\.equals\(" />
			<property name="message"
				value="Use isEmpty() rather than comparing with &quot;&quot;." />
			<property name="ignoreComments" value="true" />
		</module>

		<module name="RegexpSinglelineJava">
			<property name="format" value="dumpStack" />
			<property name="message"
				value="Avoid Thread.dumpStack(). Use a Logger instead." />
			<property name="ignoreComments" value="true" />
		</module>
	</module>

</module>
