package io.opensphere.heatmap;

/** Definitions of heat map gradients. Taken from server-common. */
public enum HeatmapGradients
{
    /** Thermal. */
    THERMAL(new int[] { 0x0, 0xa000066, 0x140d0073, 0x1e110077, 0x28190073, 0x331e0578, 0x3d1d0479, 0x4724047a, 0x5126037b,
        0x5b2a037e, 0x662d057f, 0x7032057f, 0x7a340482, 0x84380685, 0x8e3b0586, 0x993f0587, 0xa3420589, 0xad45068c, 0xb74a068c,
        0xc14d058f, 0xcc500591, 0xd6530693, 0xe0560694, 0xea5a0595, 0xf45d0597, 0xff62079a, 0xff640699, 0xff660699, 0xff680699,
        0xff6a0699, 0xff6d0599, 0xff6f0599, 0xff710599, 0xff730599, 0xff760499, 0xff780499, 0xff7a0499, 0xff7c0499, 0xff7f0399,
        0xff810399, 0xff830399, 0xff850399, 0xff880299, 0xff8a0299, 0xff8c0299, 0xff8e0299, 0xff910199, 0xff930199, 0xff950199,
        0xff970199, 0xff9a0199,

        0xff9b0198, 0xff9c0197, 0xff9e0297, 0xff9f0296, 0xffa10395, 0xffa20395, 0xffa40394, 0xffa50493, 0xffa70493, 0xffa80592,
        0xffaa0591, 0xffab0591, 0xffad0690, 0xffae0690, 0xffb0078f, 0xffb1078e, 0xffb3078e, 0xffb4088d, 0xffb6088c, 0xffb7098c,
        0xffb9098b, 0xffba098a, 0xffbc0a8a, 0xffbd0a89, 0xffbf0b89, 0xffc00c86, 0xffc10d83, 0xffc20e81, 0xffc3107e, 0xffc4117c,
        0xffc51279, 0xffc61477, 0xffc71574, 0xffc81672, 0xffc9186f, 0xffca196d, 0xffcb1a6a, 0xffcc1c68, 0xffcd1d65, 0xffce1e63,
        0xffcf2060, 0xffd0215e, 0xffd1225b, 0xffd22459, 0xffd32556, 0xffd42654, 0xffd52851, 0xffd6294f, 0xffd72a4c, 0xffd92c4a,

        0xffd92d47, 0xffda2f45, 0xffda3042, 0xffdb3240, 0xffdc333e, 0xffdc353b, 0xffdd3639, 0xffde3836, 0xffde3a34, 0xffdf3b32,
        0xffe03d2f, 0xffe03e2d, 0xffe1402a, 0xffe14128, 0xffe24326, 0xffe34423, 0xffe34621, 0xffe4481e, 0xffe5491c, 0xffe54b1a,
        0xffe64c17, 0xffe74e15, 0xffe74f12, 0xffe85110, 0xffe9530e, 0xffe9540d, 0xffe9560c, 0xffea570c, 0xffea590b, 0xffeb5a0b,
        0xffeb5c0a, 0xffeb5d0a, 0xffec5f09, 0xffec6108, 0xffed6208, 0xffed6407, 0xffed6507, 0xffee6706, 0xffee6806, 0xffef6a05,
        0xffef6b05, 0xffef6d04, 0xfff06f03, 0xfff07003, 0xfff17202, 0xfff17302, 0xfff17501, 0xfff27601, 0xfff27800, 0xfff37a00,

        0xfff37b00, 0xfff37d00, 0xfff47f00, 0xfff48000, 0xfff48200, 0xfff58400, 0xfff58600, 0xfff58700, 0xfff68900, 0xfff68b00,
        0xfff68c00, 0xfff78e00, 0xfff79000, 0xfff89200, 0xfff89300, 0xfff89500, 0xfff99700, 0xfff99800, 0xfff99a00, 0xfffa9c00,
        0xfffa9e00, 0xfffa9f00, 0xfffba100, 0xfffba300, 0xfffca500, 0xfffca600, 0xfffca700, 0xfffca900, 0xfffcaa00, 0xfffcac00,
        0xfffcad00, 0xfffcaf00, 0xfffcb000, 0xfffcb100, 0xfffcb300, 0xfffcb400, 0xfffcb600, 0xfffcb700, 0xfffcb900, 0xfffcba00,
        0xfffcbc00, 0xfffcbd00, 0xfffcbe00, 0xfffcc000, 0xfffcc100, 0xfffcc300, 0xfffcc400, 0xfffcc600, 0xfffcc700, 0xfffcc900,

        0xfffcca05, 0xfffccb0a, 0xfffccc0f, 0xfffccd14, 0xfffcce19, 0xfffccf1e, 0xfffcd023, 0xfffcd128, 0xfffcd22d, 0xfffcd333,
        0xfffcd438, 0xfffcd53d, 0xfffcd742, 0xfffcd847, 0xfffcd94c, 0xfffcda51, 0xfffddb56, 0xfffddc5b, 0xfffddd60, 0xfffdde66,
        0xfffddf6b, 0xfffde070, 0xfffde175, 0xfffde27a, 0xfffde47f, 0xfffde584, 0xfffde689, 0xfffde78e, 0xfffde893, 0xfffde999,
        0xfffdea9e, 0xfffdeba3, 0xfffdeca8, 0xfffeedad, 0xfffeeeb2, 0xfffeefb7, 0xfffef0bc, 0xfffef2c1, 0xfffef3c6, 0xfffef4cc,
        0xfffef5d1, 0xfffef6d6, 0xfffef7db, 0xfffef8e0, 0xfffef9e5, 0xfffefaea, 0xfffefbef, 0xfffefcf4, 0xfffefdf9, 0xffffffff,

        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff }, "Thermal"),

    /** Rainbow. */
    RAINBOW(new int[] { 0x0, 0xa0000ff, 0x140000ff, 0x1e0000f6, 0x280000f9, 0x330000f5, 0x3d0000f7, 0x470000f8, 0x510000f5,
        0x5b0000f6, 0x660000f5, 0x700000f6, 0x7a0000f7, 0x840000f5, 0x8e0000f6, 0x990000f5, 0xa30000f5, 0xad0000f6, 0xb70000f5,
        0xc10000f6, 0xcc0000f5, 0xd60000f5, 0xe00000f6, 0xea0000f4, 0xf40000f5, 0xff0000f6, 0xff0006f6, 0xff000cf6, 0xff0013f6,
        0xff0019f6, 0xff0020f6, 0xff0026f6, 0xff002cf6, 0xff0033f6, 0xff0039f6, 0xff0040f6, 0xff0046f6, 0xff004cf6, 0xff0053f6,
        0xff0059f6, 0xff0060f6, 0xff0066f6, 0xff006cf6, 0xff0073f6, 0xff0079f6, 0xff0080f6, 0xff0086f6, 0xff008cf6, 0xff0093f6,
        0xff0099f6, 0xff01a0f6,

        0xff00a3f5, 0xff00a6f5, 0xff00a9f4, 0xff00acf4, 0xff00aff4, 0xff00b2f3, 0xff00b5f3, 0xff00b8f2, 0xff00bbf2, 0xff00bef2,
        0xff00c1f1, 0xff00c4f1, 0xff00c7f0, 0xff00caf0, 0xff00cdf0, 0xff00d0ef, 0xff00d3ef, 0xff00d6ee, 0xff00d9ee, 0xff00dcee,
        0xff00dfed, 0xff00e2ed, 0xff00e5ec, 0xff00e8ec, 0xff00ecec, 0xff00ece2, 0xff00edd9, 0xff00eecf, 0xff00efc6, 0xff00efbc,
        0xff00f0b3, 0xff00f1a9, 0xff00f2a0, 0xff00f297, 0xff00f38d, 0xff00f484, 0xff00f57a, 0xff00f571, 0xff00f667, 0xff00f75e,
        0xff00f854, 0xff00f84b, 0xff00f942, 0xff00fa38, 0xff00fb2f, 0xff00fb25, 0xff00fc1c, 0xff00fd12, 0xff00fe09, 0xff00ff00,

        0xff0aff00, 0xff14ff00, 0xff1eff00, 0xff28ff00, 0xff33ff00, 0xff3dff00, 0xff47ff00, 0xff51ff00, 0xff5bff00, 0xff66ff00,
        0xff70ff00, 0xff7aff00, 0xff84ff00, 0xff8eff00, 0xff99ff00, 0xffa3ff00, 0xffadff00, 0xffb7ff00, 0xffc1ff00, 0xffccff00,
        0xffd6ff00, 0xffe0ff00, 0xffeaff00, 0xfff4ff00, 0xffffff00, 0xfffefc00, 0xfffdf900, 0xfffcf700, 0xfffbf400, 0xfffaf200,
        0xfff9ef00, 0xfff8ed00, 0xfff7ea00, 0xfff6e800, 0xfff5e500, 0xfff4e300, 0xfff3e000, 0xfff2de00, 0xfff1db00, 0xfff0d900,
        0xffefd600, 0xffeed400, 0xffedd100, 0xffeccf00, 0xffebcc00, 0xffeaca00, 0xffe9c700, 0xffe8c500, 0xffe7c200, 0xffe7c000,

        0xffe7be00, 0xffe8bc00, 0xffe9ba00, 0xffeab800, 0xffebb600, 0xffecb400, 0xffedb200, 0xffeeb000, 0xffefae00, 0xfff0ac00,
        0xfff1aa00, 0xfff2a800, 0xfff3a700, 0xfff4a500, 0xfff5a300, 0xfff6a100, 0xfff79f00, 0xfff89d00, 0xfff99b00, 0xfffa9900,
        0xfffb9700, 0xfffc9500, 0xfffd9300, 0xfffe9100, 0xffff9000, 0xffff8a00, 0xffff8400, 0xffff7e00, 0xffff7800, 0xffff7300,
        0xffff6d00, 0xffff6700, 0xffff6100, 0xffff5c00, 0xffff5600, 0xffff5000, 0xffff4a00, 0xffff4500, 0xffff3f00, 0xffff3900,
        0xffff3300, 0xffff2e00, 0xffff2800, 0xffff2200, 0xffff1c00, 0xffff1700, 0xffff1100, 0xffff0b00, 0xffff0500, 0xffff0000,

        0xffff0505, 0xffff0a0a, 0xffff0f0f, 0xffff1414, 0xffff1919, 0xffff1e1e, 0xffff2323, 0xffff2828, 0xffff2d2d, 0xffff3333,
        0xffff3838, 0xffff3d3d, 0xffff4242, 0xffff4747, 0xffff4c4c, 0xffff5151, 0xffff5656, 0xffff5b5b, 0xffff6060, 0xffff6666,
        0xffff6b6b, 0xffff7070, 0xffff7575, 0xffff7a7a, 0xffff7f7f, 0xffff8484, 0xffff8989, 0xffff8e8e, 0xffff9393, 0xffff9999,
        0xffff9e9e, 0xffffa3a3, 0xffffa8a8, 0xffffadad, 0xffffb2b2, 0xffffb7b7, 0xffffbcbc, 0xffffc1c1, 0xffffc6c6, 0xffffcccc,
        0xffffd1d1, 0xffffd6d6, 0xffffdbdb, 0xffffe0e0, 0xffffe5e5, 0xffffeaea, 0xffffefef, 0xfffff4f4, 0xfffff9f9, 0xffffffff,

        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff }, "Rainbow"),

    /** Red/white/blue. */
    RED_WHITE_BLUE(new int[] { 0x0, 0x30000ff, 0x60000ff, 0xa0000ff, 0xd0000ff, 0x110000ff, 0x140000ff, 0x170000ff, 0x1b0000f5,
        0x1e0000f6, 0x220000f7, 0x250000f8, 0x280000f9, 0x2c0000f9, 0x2f0000f9, 0x330000fa, 0x360000fa, 0x390000fa, 0x3d0000fb,
        0x400000f7, 0x440000f7, 0x470000f8, 0x4a0000f8, 0x4e0000f8, 0x510000f8, 0x550000f9, 0x580000f9, 0x5b0000f9, 0x5f0000fa,
        0x620000fa, 0x660000fa, 0x690000fa, 0x6c0000fa, 0x700000f8, 0x730000fa, 0x770000fa, 0x7a0000fb, 0x7d0000fb, 0x810000f9,
        0x840000f9, 0x880000f9, 0x8b0000f9, 0x8e0000fb, 0x920000fb, 0x950000fc, 0x990000fa, 0x9c0000fa, 0x9f0000fa, 0xa30000fa,
        0xa60000fa, 0xaa0000fc,

        0xad0000fc, 0xb00000fb, 0xb40000fc, 0xb70000fc, 0xbb0000fc, 0xbe0000fc, 0xc10000fb, 0xc50000fb, 0xc80000fc, 0xcc0000fc,
        0xcf0000fc, 0xd20000fc, 0xd60000fd, 0xd90000fc, 0xdd0000fc, 0xe00000fc, 0xe30000fd, 0xe70000fd, 0xea0000fd, 0xee0000fe,
        0xf10000fd, 0xf40000fd, 0xf80000fe, 0xfb0000fe, 0xff0000ff, 0xff0300fb, 0xff0600f8, 0xff0a00f4, 0xff0d00f1, 0xff1100ee,
        0xff1400ea, 0xff1700e7, 0xff1b00e3, 0xff1e00e0, 0xff2200dd, 0xff2500d9, 0xff2800d6, 0xff2c00d2, 0xff2f00cf, 0xff3300cc,
        0xff3600c8, 0xff3900c5, 0xff3d00c1, 0xff4000be, 0xff4400bb, 0xff4700b7, 0xff4a00b4, 0xff4e00b0, 0xff5100ad, 0xff5500aa,

        0xff5800a6, 0xff5b00a3, 0xff5f009f, 0xff62009c, 0xff660099, 0xff690095, 0xff6c0092, 0xff70008e, 0xff73008b, 0xff770088,
        0xff7a0084, 0xff7d0081, 0xff81007d, 0xff84007a, 0xff880077, 0xff8b0073, 0xff8e0070, 0xff92006c, 0xff950069, 0xff990066,
        0xff9c0062, 0xff9f005f, 0xffa3005b, 0xffa60058, 0xffaa0055, 0xffad0051, 0xffb0004e, 0xffb4004a, 0xffb70047, 0xffbb0044,
        0xffbe0040, 0xffc1003d, 0xffc50039, 0xffc80036, 0xffcc0033, 0xffcf002f, 0xffd2002c, 0xffd60028, 0xffd90025, 0xffdd0022,
        0xffe0001e, 0xffe3001b, 0xffe70017, 0xffea0014, 0xffee0011, 0xfff1000d, 0xfff4000a, 0xfff80006, 0xfffb0003, 0xffff0000,

        0xffff0303, 0xffff0606, 0xffff0a0a, 0xffff0d0d, 0xffff1111, 0xffff1414, 0xffff1717, 0xffff1b1b, 0xffff1e1e, 0xffff2222,
        0xffff2525, 0xffff2828, 0xffff2c2c, 0xffff2f2f, 0xffff3333, 0xffff3636, 0xffff3939, 0xffff3d3d, 0xffff4040, 0xffff4444,
        0xffff4747, 0xffff4a4a, 0xffff4e4e, 0xffff5151, 0xffff5555, 0xffff5858, 0xffff5b5b, 0xffff5f5f, 0xffff6262, 0xffff6666,
        0xffff6969, 0xffff6c6c, 0xffff7070, 0xffff7373, 0xffff7777, 0xffff7a7a, 0xffff7d7d, 0xffff8181, 0xffff8484, 0xffff8888,
        0xffff8b8b, 0xffff8e8e, 0xffff9292, 0xffff9595, 0xffff9999, 0xffff9c9c, 0xffff9f9f, 0xffffa3a3, 0xffffa6a6, 0xffffaaaa,

        0xffffadad, 0xffffb0b0, 0xffffb4b4, 0xffffb7b7, 0xffffbbbb, 0xffffbebe, 0xffffc1c1, 0xffffc5c5, 0xffffc8c8, 0xffffcccc,
        0xffffcfcf, 0xffffd2d2, 0xffffd6d6, 0xffffd9d9, 0xffffdddd, 0xffffe0e0, 0xffffe3e3, 0xffffe7e7, 0xffffeaea, 0xffffeeee,
        0xfffff1f1, 0xfffff4f4, 0xfffff8f8, 0xfffffbfb, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,

        0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff }, "Red/White/Blue"),

    /** Hue. */
    HUE(new int[] { 0x0, 0xa0007ff, 0x14000fff, 0x1e0017ff, 0x28001fff, 0x330027ff, 0x3d002fff, 0x470037ff, 0x51003fff,
        0x5b0047ff, 0x66004fff, 0x700057ff, 0x7a005fff, 0x840067ff, 0x8e006fff, 0x990077ff, 0xa3007fff, 0xad0087ff, 0xb7008fff,
        0xc10097ff, 0xcc009fff, 0xd600a7ff, 0xe000afff, 0xea00b7ff, 0xf400bfff, 0xff00c7ff, 0xff00cfff, 0xff00d7ff, 0xff00dfff,
        0xff00e7ff, 0xff00efff, 0xff00f7ff, 0xff00ffff, 0xff00fffc, 0xff00fff9, 0xff00fff7, 0xff00fff4, 0xff00fff1, 0xff00ffef,
        0xff00ffec, 0xff00ffe9, 0xff00ffe7, 0xff00ffe4, 0xff00ffe1, 0xff00ffdf, 0xff00ffdc, 0xff00ffd9, 0xff00ffd7, 0xff00ffd4,
        0xff00ffd1, 0xff00ffcf,

        0xff00ffcc, 0xff00ffc9, 0xff00ffc7, 0xff00ffc4, 0xff00ffc1, 0xff00ffbf, 0xff00ffbc, 0xff00ffb9, 0xff00ffb7, 0xff00ffb4,
        0xff00ffb1, 0xff00ffaf, 0xff00ffac, 0xff00ffaa, 0xff00ffa7, 0xff00ffa4, 0xff00ffa2, 0xff00ff9f, 0xff00ff9c, 0xff00ff9a,
        0xff00ff97, 0xff00ff94, 0xff00ff92, 0xff00ff8f, 0xff00ff8c, 0xff00ff8a, 0xff00ff87, 0xff00ff84, 0xff00ff82, 0xff00ff7f,
        0xff00ff7c, 0xff00ff7a, 0xff00ff77, 0xff00ff74, 0xff00ff72, 0xff00ff6f, 0xff00ff6c, 0xff00ff6a, 0xff00ff67, 0xff00ff64,
        0xff00ff62, 0xff00ff5f, 0xff00ff5c, 0xff00ff5a, 0xff00ff57, 0xff00ff55, 0xff00ff52, 0xff00ff4f, 0xff00ff4d, 0xff00ff4a,

        0xff00ff47, 0xff00ff45, 0xff00ff42, 0xff00ff3f, 0xff00ff3d, 0xff00ff3a, 0xff00ff37, 0xff00ff35, 0xff00ff32, 0xff00ff2f,
        0xff00ff2d, 0xff00ff2a, 0xff00ff27, 0xff00ff25, 0xff00ff22, 0xff00ff1f, 0xff00ff1d, 0xff00ff1a, 0xff00ff17, 0xff00ff15,
        0xff00ff12, 0xff00ff0f, 0xff00ff0d, 0xff00ff0a, 0xff00ff07, 0xff00ff05, 0xff00ff02, 0xff00ff00, 0xff02ff00, 0xff05ff00,
        0xff07ff00, 0xff0aff00, 0xff0cff00, 0xff0fff00, 0xff11ff00, 0xff14ff00, 0xff16ff00, 0xff19ff00, 0xff1cff00, 0xff1eff00,
        0xff21ff00, 0xff23ff00, 0xff26ff00, 0xff28ff00, 0xff2bff00, 0xff2dff00, 0xff30ff00, 0xff33ff00, 0xff35ff00, 0xff38ff00,

        0xff3aff00, 0xff3dff00, 0xff3fff00, 0xff42ff00, 0xff44ff00, 0xff47ff00, 0xff49ff00, 0xff4cff00, 0xff4fff00, 0xff51ff00,
        0xff54ff00, 0xff56ff00, 0xff59ff00, 0xff5bff00, 0xff5eff00, 0xff60ff00, 0xff63ff00, 0xff66ff00, 0xff68ff00, 0xff6bff00,
        0xff6dff00, 0xff70ff00, 0xff72ff00, 0xff75ff00, 0xff77ff00, 0xff7aff00, 0xff7cff00, 0xff7fff00, 0xff82ff00, 0xff84ff00,
        0xff87ff00, 0xff89ff00, 0xff8cff00, 0xff8eff00, 0xff91ff00, 0xff93ff00, 0xff96ff00, 0xff99ff00, 0xff9bff00, 0xff9eff00,
        0xffa0ff00, 0xffa3ff00, 0xffa5ff00, 0xffa8ff00, 0xffaaff00, 0xffadff00, 0xffafff00, 0xffb2ff00, 0xffb5ff00, 0xffb7ff00,

        0xffbaff00, 0xffbcff00, 0xffbfff00, 0xffc1ff00, 0xffc4ff00, 0xffc6ff00, 0xffc9ff00, 0xffccff00, 0xffceff00, 0xffd1ff00,
        0xffd3ff00, 0xffd6ff00, 0xffd8ff00, 0xffdbff00, 0xffddff00, 0xffe0ff00, 0xffe2ff00, 0xffe5ff00, 0xffe8ff00, 0xffeaff00,
        0xffedff00, 0xffefff00, 0xfff2ff00, 0xfff4ff00, 0xfff7ff00, 0xfff9ff00, 0xfffcff00, 0xffffff00, 0xfffff500, 0xffffec00,
        0xffffe200, 0xffffd900, 0xffffcf00, 0xffffc600, 0xffffbc00, 0xffffb300, 0xffffaa00, 0xffffa000, 0xffff9700, 0xffff8d00,
        0xffff8400, 0xffff7a00, 0xffff7100, 0xffff6700, 0xffff5e00, 0xffff5500, 0xffff4b00, 0xffff4200, 0xffff3800, 0xffff2f00,

        0xffff2500, 0xffff1c00, 0xffff1200, 0xffff0900, 0xffff0000 }, "Hue");

    /** The gradients. */
    private final int[] myGradients;

    /** The name. */
    private final String myName;

    /**
     * Constructor.
     *
     * @param gradients The gradients
     * @param name The name
     */
    private HeatmapGradients(int[] gradients, String name)
    {
        myGradients = gradients;
        myName = name;
    }

    /**
     * Gets the gradients.
     *
     * @return the gradients
     */
    public int[] getGradients()
    {
        return myGradients.clone();
    }

    @Override
    public String toString()
    {
        return myName;
    }
}
