<?xml version="1.0" encoding="UTF-8"?>
<ruleset xmlns="http://pmd.sf.net/ruleset/1.0.0" name="pmd-config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd" xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">
   <description>OpenSphere</description>
   <!-- 
   <rule name="DeadCode"
         language="java"
         since="4.3"
         message="Dead code analysis."
         class="io.opensphere.pmdrules.DeadCode"
         externalInfoUrl="">
    <description>
    </description>
    <priority>3</priority>
    <properties/>
    <example/>
  </rule>
    -->

   <rule language="java" name="LoggerUsesWrongName" message="Logger uses wrong name"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
         A Logger should use the name of the class that owns it.
      </description>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//FieldDeclaration[parent::ClassOrInterfaceBodyDeclaration]
                  [Type/ReferenceType/ClassOrInterfaceType[ends-with(@Image,'Logger')]]
                   [.//Arguments/ArgumentList//ClassOrInterfaceType[not(@Image=ancestor::ClassOrInterfaceDeclaration/@Image)]]
 ]]>
            </value>
         </property>
      </properties>
      <priority>3</priority>
      <example>
<![CDATA[
public class Foo
{
    private static final Logger LOGGER1 = Logger.getLogger(Bar.class); // no
    private static final Logger LOGGER2 = Logger.getLogger(Foo.class); // yes
}
]]>
      </example>
   </rule>

   <rule language="java" name="GetResourceUsesWrongClass" message="The wrong class is used for a getResource call"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
         The current class should be used for getResource calls to
         avoid unnecessary class coupling
      </description>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//PrimaryExpression
  [PrimarySuffix[starts-with(@Image, 'getResource')]]
  [not(PrimaryPrefix//ClassOrInterfaceType/@Image=ancestor::ClassOrInterfaceDeclaration/@Image)
   and not(.//@Image='getClass') and not (.//@Image='getContextClassLoader')]
]]>
            </value>
         </property>
      </properties>
      <priority>3</priority>
      <example>
<![CDATA[
public class Foo
{
    static
    {
      Foo.class.getClassLoader().getResources("");
      Bar.class.getClassLoader().getResources(""); // no
      Foo.class.getResources("");
      Bar.class.getResources(""); // no
    }

    public void bar()
    {
      Foo.class.getClassLoader().getResources("");
      Bar.class.getClassLoader().getResources(""); // no
      getClass().getClassLoader().getResource(""); 
      this.getClass().getClassLoader().getResource("");
      Foo.class.getResources("");
      Bar.class.getResources(""); // no
      getClass().getResource("");
      this.getClass().getResource("");
      Thread.currentThread().getContextClassLoader().getResource("");
    }
}

]]>
      </example>
   </rule>
  
  
   <rule ref="rulesets/java/basic.xml/JumbledIncrementer"/>
   <rule ref="rulesets/java/basic.xml/ForLoopShouldBeWhileLoop"/>
   <rule ref="rulesets/java/basic.xml/ReturnFromFinallyBlock"/>
   <rule ref="rulesets/java/basic.xml/UnconditionalIfStatement"/>
   <rule ref="rulesets/java/basic.xml/BooleanInstantiation"/>
   <rule ref="rulesets/java/basic.xml/CollapsibleIfStatements"/>
   <rule ref="rulesets/java/basic.xml/ClassCastExceptionWithToArray"/>
   <rule ref="rulesets/java/basic.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
   <rule ref="rulesets/java/basic.xml/MisplacedNullCheck"/>
   <rule ref="rulesets/java/basic.xml/BrokenNullCheck"/>
   <rule ref="rulesets/java/basic.xml/BigIntegerInstantiation"/>
   <rule ref="rulesets/java/basic.xml/AvoidUsingOctalValues"/>
   <rule ref="rulesets/java/basic.xml/AvoidUsingHardCodedIP"/>
   <rule ref="rulesets/java/basic.xml/AvoidMultipleUnaryOperators"/>
   <rule ref="rulesets/java/basic.xml/ExtendsObject"/>
   <rule ref="rulesets/java/basic.xml/CheckSkipResult"/>
   <rule ref="rulesets/java/basic.xml/AvoidBranchingStatementAsLastInLoop"/>
   <rule ref="rulesets/java/basic.xml/DontCallThreadRun"/>
   <rule ref="rulesets/java/basic.xml/DontUseFloatTypeForLoopIndices"/>
   <rule ref="rulesets/java/basic.xml/SimplifiedTernary"/>
   <rule ref="rulesets/java/clone.xml/ProperCloneImplementation"/>
   <rule ref="rulesets/java/clone.xml/CloneMethodReturnTypeMustMatchClassName"/>
   <rule ref="rulesets/java/clone.xml/CloneMethodMustBePublic"/>
<!--    <rule ref="rulesets/java/comments.xml/CommentDefaultAccessModifier"/> -->
   <rule ref="rulesets/java/controversial.xml/SuspiciousOctalEscape"/>
   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryParentheses"/>
   <rule ref="rulesets/java/controversial.xml/AvoidAccessibilityAlteration"/>
   <rule ref="rulesets/java/controversial.xml/AvoidUsingShortType">
      <priority>5</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/UseUtilityClass"/>
   <rule ref="rulesets/java/design.xml/SimplifyBooleanReturns"/>
   <rule ref="rulesets/java/design.xml/SimplifyBooleanExpressions"/>
   <rule ref="rulesets/java/design.xml/AvoidReassigningParameters">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/ConstructorCallsOverridableMethod">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/AccessorClassGeneration"/>
   <rule ref="rulesets/java/design.xml/FinalFieldCouldBeStatic"/>
   <rule ref="rulesets/java/design.xml/CloseResource"/>
   <rule ref="rulesets/java/design.xml/NonCaseLabelInSwitchStatement"/>
   <rule ref="rulesets/java/design.xml/OptimizableToArrayCall"/>
   <rule ref="rulesets/java/design.xml/BadComparison"/>
   <rule ref="rulesets/java/design.xml/EqualsNull"/>
   <rule ref="rulesets/java/design.xml/InstantiationToGetClass"/>
   <rule ref="rulesets/java/design.xml/IdempotentOperations"/>
   <rule ref="rulesets/java/design.xml/ImmutableField"/>
   <rule ref="rulesets/java/design.xml/AvoidProtectedFieldInFinalClass"/>
   <rule ref="rulesets/java/design.xml/MissingStaticMethodInNonInstantiatableClass"/>
   <rule ref="rulesets/java/design.xml/MissingBreakInSwitch">
      <priority>5</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/AvoidInstanceofChecksInCatchClause"/>
   <rule ref="rulesets/java/design.xml/SimplifyConditional"/>
   <rule ref="rulesets/java/design.xml/CompareObjectsWithEquals">
      <priority>5</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInComparisons"/>
   <rule ref="rulesets/java/design.xml/PositionLiteralsFirstInCaseInsensitiveComparisons"/>
   <rule ref="rulesets/java/design.xml/NonThreadSafeSingleton"/>
   <rule ref="rulesets/java/design.xml/UnsynchronizedStaticDateFormatter"/>
   <rule ref="rulesets/java/design.xml/PreserveStackTrace"/>
   <rule ref="rulesets/java/design.xml/UseCollectionIsEmpty"/>
   <rule ref="rulesets/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
   <rule ref="rulesets/java/design.xml/ReturnEmptyArrayRatherThanNull">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/LogicInversion"/>
   <!-- UseVarargs warns even for overridden methods. -->
<!--    <rule ref="rulesets/java/design.xml/UseVarargs"/> -->
   <rule ref="rulesets/java/design.xml/GodClass">
       <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/design.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
   <rule ref="rulesets/java/design.xml/SingleMethodSingleton"/>
   <rule ref="rulesets/java/design.xml/SingletonClassReturningNewInstance"/>
   <rule ref="rulesets/java/empty.xml/EmptyCatchBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptyIfStmt"/>
   <rule ref="rulesets/java/empty.xml/EmptyWhileStmt"/>
   <rule ref="rulesets/java/empty.xml/EmptyTryBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptySwitchStatements"/>
   <rule ref="rulesets/java/empty.xml/EmptySynchronizedBlock"/>
   <rule ref="rulesets/java/empty.xml/EmptyStatementNotInLoop"/>
   <rule ref="rulesets/java/empty.xml/EmptyInitializer"/>
   <rule ref="rulesets/java/finalizers.xml/EmptyFinalizer"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeOnlyCallsSuperFinalize"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeOverloaded"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeDoesNotCallSuperFinalize"/>
   <rule ref="rulesets/java/finalizers.xml/FinalizeShouldBeProtected"/>
   <rule ref="rulesets/java/finalizers.xml/AvoidCallingFinalize"/>
   <rule ref="rulesets/java/imports.xml/DontImportJavaLang"/>
   <rule ref="rulesets/java/imports.xml/UnusedImports"/>
   <rule ref="rulesets/java/imports.xml/ImportFromSamePackage"/>
   <rule ref="rulesets/java/junit.xml/JUnitStaticSuite"/>
   <rule ref="rulesets/java/junit.xml/JUnitSpelling"/>
   <rule ref="rulesets/java/junit.xml/TestClassWithoutTestCases"/>
   <rule ref="rulesets/java/junit.xml/UnnecessaryBooleanAssertion"/>
   <rule ref="rulesets/java/junit.xml/UseAssertEqualsInsteadOfAssertTrue"/>
   <rule ref="rulesets/java/junit.xml/UseAssertNullInsteadOfAssertTrue"/>
   <rule ref="rulesets/java/junit.xml/SimplifyBooleanAssertion"/>
   <rule ref="rulesets/java/logging-jakarta-commons.xml/UseCorrectExceptionLogging"/>
   <rule ref="rulesets/java/logging-jakarta-commons.xml/ProperLogger"/>
   <rule ref="rulesets/java/logging-jakarta-commons.xml/GuardLogStatement">
       <properties>
           <property name="logLevels" value="trace,debug"/>
           <property name="guardsMethods" value="isTraceEnabled,isDebugEnabled"/>
       </properties>
   </rule>
   <rule ref="rulesets/java/logging-java.xml/LoggerIsNotStaticFinal"/>
   <rule ref="rulesets/java/logging-java.xml/SystemPrintln">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/logging-java.xml/AvoidPrintStackTrace"/>
   <rule language="java" name="LoggerIsNotPrivateStaticFinal" message="Logger is not private static final"
      class="net.sourceforge.pmd.lang.rule.XPathRule">
      <description>
         In most cases, the Logger reference can be declared as private, static, and final. 
      </description>
      <properties>
         <property name="xpath">
            <value>
<![CDATA[
//VariableDeclarator[parent::FieldDeclaration]
 [../Type/ReferenceType/ClassOrInterfaceType[@Image='Logger']
   and
  (..[@Final='false'] or ..[@Static = 'false'] or ..[@Private = 'false'] ) ]
]]>
            </value>
         </property>
      </properties>
      <priority>3</priority>
      <example>
<![CDATA[
public class Foo{
    Logger log = Logger.getLogger(Foo.class.getName());					// not recommended

    private static final Logger log = Logger.getLogger(Foo.class.getName());	// preferred approach
}
]]>
      </example>
   </rule>
   <rule ref="rulesets/java/migrating.xml/ReplaceVectorWithList"/>
   <rule ref="rulesets/java/migrating.xml/ReplaceHashtableWithMap"/>
   <rule ref="rulesets/java/migrating.xml/ReplaceEnumerationWithIterator"/>
   <rule ref="rulesets/java/migrating.xml/AvoidEnumAsIdentifier"/>
   <rule ref="rulesets/java/migrating.xml/AvoidAssertAsIdentifier"/>
   <rule ref="rulesets/java/migrating.xml/IntegerInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/ByteInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/ShortInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/LongInstantiation"/>
   <rule ref="rulesets/java/migrating.xml/JUnitUseExpected"/>
   <rule ref="rulesets/java/naming.xml/ShortMethodName"/>
   <rule ref="rulesets/java/naming.xml/AvoidDollarSigns"/>
   <rule ref="rulesets/java/naming.xml/MethodWithSameNameAsEnclosingClass"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousHashcodeMethodName"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousConstantFieldName"/>
   <rule ref="rulesets/java/naming.xml/SuspiciousEqualsMethodName"/>
   <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingTypeName"/>
   <rule ref="rulesets/java/naming.xml/AvoidFieldNameMatchingMethodName"/>
   <rule ref="rulesets/java/naming.xml/NoPackage"/>
   <rule ref="rulesets/java/naming.xml/PackageCase"/>
   <rule ref="rulesets/java/naming.xml/MIsLeadingVariableName">
      <description>&#13;
Detects when a non-field has a name starting with 'my'.  This usually&#13;
indicates a field and thus is confusing.&#13;
      </description>
   </rule>
   <rule ref="rulesets/java/naming.xml/BooleanGetMethodName"/>
   <rule ref="rulesets/java/naming.xml/GenericsNaming"/>
   <rule ref="rulesets/java/javabeans.xml/MissingSerialVersionUID"/>
   <rule ref="rulesets/java/optimizations.xml/UseArrayListInsteadOfVector"/>
   <rule ref="rulesets/java/optimizations.xml/SimplifyStartsWith">
      <properties>
         <property name="xpath">
            <value><![CDATA[//PrimaryExpression
 [PrimaryPrefix/Name
  [ends-with(@Image, '.startsWith')]]
 [PrimarySuffix/Arguments/ArgumentList
  /Expression/PrimaryExpression/PrimaryPrefix
  /Literal
   [string-length(@Image)=3
    and starts-with(@Image, '"')
    and ends-with(@Image, '"')
    or string-length(@Image)=4
    and starts-with(@Image, '"\')
    and ends-with(@Image, '"')]
 ]]]></value>
         </property>
      </properties>
   </rule>
   <rule ref="rulesets/java/optimizations.xml/UseStringBufferForStringAppends"/>
   <rule ref="rulesets/java/optimizations.xml/UseArraysAsList"/>
   <rule ref="rulesets/java/optimizations.xml/AvoidArrayLoops"/>
   <rule ref="rulesets/java/optimizations.xml/UnnecessaryWrapperObjectCreation"/>
   <rule ref="rulesets/java/optimizations.xml/AddEmptyString"/>
   <rule ref="rulesets/java/optimizations.xml/PrematureDeclaration"/>
   <rule ref="rulesets/java/strictexception.xml/SignatureDeclareThrowsException"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidCatchingNPE"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingRawExceptionTypes">
      <priority>3</priority>
   </rule>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNullPointerException"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidRethrowingException"/>
   <rule ref="rulesets/java/strictexception.xml/DoNotExtendJavaLangError"/>
   <rule ref="rulesets/java/strictexception.xml/DoNotThrowExceptionInFinally"/>
   <rule ref="rulesets/java/strictexception.xml/AvoidThrowingNewInstanceOfSameException"/>
   <rule ref="rulesets/java/strings.xml/AvoidDuplicateLiterals">
       <properties>
           <property name="skipAnnotations" value="true"/>
           <property name="exceptionList" value="]: ,"/>
           <property name="maxDuplicateLiterals" value="6"/>
       </properties>
       <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/strings.xml/StringInstantiation">
      <priority>4</priority>
   </rule>
   <rule ref="rulesets/java/strings.xml/StringToString"/>
   <rule ref="rulesets/java/strings.xml/InefficientStringBuffering"/>
   <rule ref="rulesets/java/strings.xml/UnnecessaryCaseChange"/>
   <rule ref="rulesets/java/strings.xml/UseStringBufferLength"/>
   <rule ref="rulesets/java/strings.xml/AppendCharacterWithChar"/>
   <rule ref="rulesets/java/strings.xml/ConsecutiveLiteralAppends"/>
   <rule ref="rulesets/java/strings.xml/UseIndexOfChar"/>
   <rule ref="rulesets/java/strings.xml/InefficientEmptyStringCheck"/>
   <rule ref="rulesets/java/strings.xml/InsufficientStringBufferDeclaration"/>
   <rule ref="rulesets/java/strings.xml/UselessStringValueOf"/>
   <rule ref="rulesets/java/strings.xml/StringBufferInstantiationWithChar"/>
   <rule ref="rulesets/java/strings.xml/AvoidStringBufferField"/>
   <rule ref="rulesets/java/coupling.xml/LooseCoupling"/>
   <rule ref="rulesets/java/strictexception.xml/SignatureDeclareThrowsException"/>
   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryConversionTemporary"/>
   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryReturn"/>
   <rule ref="rulesets/java/unnecessary.xml/UnnecessaryModifier"/>
   <rule ref="rulesets/java/unnecessary.xml/UselessOverridingMethod"/>
   <rule ref="rulesets/java/unnecessary.xml/UselessOperationOnImmutable"/>
   <rule ref="rulesets/java/unnecessary.xml/UnusedNullCheckInEquals"/>
   <rule ref="rulesets/java/unnecessary.xml/UselessQualifiedThis"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateField"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedLocalVariable"/>
   <rule ref="rulesets/java/unusedcode.xml/UnusedPrivateMethod"/>
</ruleset>
