// Input to the fragment shader.
struct TileFragIn
{
   float4 color : COLOR0;
   float2 texcoord : TEXCOORD0;
   float2 texcoord1 : TEXCOORD1;
};

// Output from the fragment shader.
struct TileFragOut
{
   float4 color : COLOR;
};

// Draw the regular texture color when the fragment is within the tile being
// drawn.
TileFragOut DRAW(TileFragIn fragIn,
         uniform float xMin,
         uniform float xMax,
         uniform float yMin,
         uniform float yMax,
         uniform sampler2D tileTex : TEXUNIT0)
{
   TileFragOut fragOut;

   // These values are 1 when in range and 0 when out of range
   float inRangeX = step(xMin, fragIn.texcoord.x) * step(-xMax, -fragIn.texcoord.x);
   float inRangeY = step(yMin, fragIn.texcoord.y) * step(-yMax, -fragIn.texcoord.y);
   float inTile = clamp(inRangeX * inRangeY, 0.0, 1.0);

   float4 tileColor = tex2D(tileTex, fragIn.texcoord);

   tileColor.r = clamp(tileColor.r + fragIn.color.r, 0.0, 1.0);
   tileColor.g = clamp(tileColor.g + fragIn.color.g, 0.0, 1.0);
   tileColor.b = clamp(tileColor.b + fragIn.color.b, 0.0, 1.0);
   tileColor.a *= fragIn.color.a * inTile;

   fragOut.color = tileColor;
   return fragOut;
}

// Special blending which does not blend the top color with the
// background color when the background is completely transparent.
float4 blendByHand(float4 top, float4 back)
{
   float goat = step(back.a, 0.001);
   float topAlphaAjust = clamp(goat+top.a, 0.0, 1.0);

   return top*topAlphaAjust + (back*(1-topAlphaAjust));
}

// This shader draws the regular fragment color for the texture, but will
// not blend the color with a background color which is transparent. This
// feature is important when rendering to texture because transparent
// foreground colors will be blended when the texture is rendered to the
// scene, so they should not be blended when rendered to the texture.
// For this to work the texture units have to be the same size.
TileFragOut DRAW_NO_BLEND(TileFragIn fragIn,
         uniform float xMin,
         uniform float xMax,
         uniform float yMin,
         uniform float yMax,
         uniform sampler2D tileTex : TEXUNIT0,
         uniform sampler2D backgroundTex : TEXUNIT1)
{
   TileFragOut fragOut;

   // These values are 1 when in range and 0 when out of range
   float inRangeX = step(xMin, fragIn.texcoord.x) * step(-xMax, -fragIn.texcoord.x);
   float inRangeY = step(yMin, fragIn.texcoord.y) * step(-yMax, -fragIn.texcoord.y);
   float inTile = clamp(inRangeX * inRangeY, 0.0, 1.0);

   float4 tileColor = tex2D(tileTex, fragIn.texcoord);
   float4 backgroundColor = tex2D(backgroundTex, fragIn.texcoord1);

   tileColor.r = clamp(tileColor.r + fragIn.color.r, 0.0, 1.0);
   tileColor.g = clamp(tileColor.g + fragIn.color.g, 0.0, 1.0);
   tileColor.b = clamp(tileColor.b + fragIn.color.b, 0.0, 1.0);
   tileColor.a *= fragIn.color.a * inTile;

   fragOut.color = blendByHand(tileColor, backgroundColor);
   
   return fragOut;
}

// The debug shader draws the texture color, but includes debug information
// as well. The border of the tile is drawn in a single color and a label
// texture may also be included which will scale to fit the width of the tile.
TileFragOut DEBUG(TileFragIn fragIn,
         uniform float xMin,
         uniform float xMax,
         uniform float yMin,
         uniform float yMax,
         uniform sampler2D tileTex : TEXUNIT0,
         uniform sampler2D labelTex : TEXUNIT1)
{
   TileFragOut fragOut;

   // These values are 1 when in range and 0 when out of range
   float inRangeX = step(xMin, fragIn.texcoord.x) * step(-xMax, -fragIn.texcoord.x);
   float inRangeY = step(yMin, fragIn.texcoord.y) * step(-yMax, -fragIn.texcoord.y);
   float inTile = clamp(inRangeX * inRangeY,0.0, 1.0);

   float4 tileColor = tex2D(tileTex, fragIn.texcoord);

   tileColor.r = clamp(tileColor.r + fragIn.color.r, 0.0, 1.0);
   tileColor.g = clamp(tileColor.g + fragIn.color.g, 0.0, 1.0);
   tileColor.b = clamp(tileColor.b + fragIn.color.b, 0.0, 1.0);
   tileColor.a *= fragIn.color.a;
   
   float percent = (xMax - xMin) * 0.005;
   float bxMin = xMin + percent;
   float bxMax = xMax - percent;
   float byMin = yMin + percent;
   float byMax = yMax - percent;

   float borderRangeX = step(-bxMin, -fragIn.texcoord.x) + step(bxMax, fragIn.texcoord.x);
   float borderRangeY = step(-byMin, -fragIn.texcoord.y) + step(byMax, fragIn.texcoord.y);
   float inBorder = clamp(borderRangeX + borderRangeY, 0.0, 1.0);

   tileColor = tileColor * (1 - inBorder) + float4(1, 0, 1, 1) * inBorder;

   float2 labelCoord = fragIn.texcoord;
   labelCoord.y = ((1 - labelCoord.y) * 10.0 * (yMax - yMin));
   labelCoord.x = labelCoord.x * (xMax - xMin);
   float4 labelColor = tex2D(labelTex, labelCoord);

   tileColor *= 1 - labelColor.a;
   tileColor += labelColor * labelColor.a;

   tileColor.a = tileColor.a * inTile;

   fragOut.color = tileColor;
   return fragOut;
}

// The pick texture is used to render the pick color (in fragIn) based on
// the texture drawn for the scene. If the drawn texture has a non-zero
// alpha, then the pick color is rendered. Otherwise, a transparent color
// is used.
TileFragOut PICK(TileFragIn fragIn,
         uniform float xMin,
         uniform float xMax,
         uniform float yMin,
         uniform float yMax,
         uniform sampler2D tileTex : TEXUNIT0)
{
   TileFragOut fragOut;

   // These values are 1 when in range and 0 when out of range
   float inRangeX = step(xMin, fragIn.texcoord.x) * step(-xMax, -fragIn.texcoord.x);
   float inRangeY = step(yMin, fragIn.texcoord.y) * step(-yMax, -fragIn.texcoord.y);
   float inTile = clamp(inRangeX * inRangeY, 0.0, 1.0);

   float4 tileColor = tex2D(tileTex, fragIn.texcoord);

   fragOut.color.r = fragIn.color.r;
   fragOut.color.g = fragIn.color.g;
   fragOut.color.b = fragIn.color.b;
   
   // Set the alpha to 0 if the tile alpha is 0 or inTile is 0. Otherwise set it to 1.
   fragOut.color.a = sign(tileColor.a) * inTile;
   
   return fragOut;
}

// The pick only shader is used to render the pick color for tiles which have
// no textures. The texture coordinates are still used to determine when the
// vertices for the backing mesh are within the tile.
TileFragOut PICK_ONLY(TileFragIn fragIn,
         uniform float xMin,
         uniform float xMax,
         uniform float yMin,
         uniform float yMax)
{
   TileFragOut fragOut;

   // These values are 1 when in range and 0 when out of range
   float inRangeX = step(0, fragIn.texcoord.x) * step(-1, -fragIn.texcoord.x);
   float inRangeY = step(0, fragIn.texcoord.y) * step(-1, -fragIn.texcoord.y);
   float inTile = clamp(inRangeX * inRangeY, 0.0, 1.0);

   fragOut.color.r = fragIn.color.r;
   fragOut.color.g = fragIn.color.g;
   fragOut.color.b = fragIn.color.b;
   fragOut.color.a = inTile;
   
   return fragOut;
}
