<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Insert logger declaration." enabled="true" name="logger">/** Logger reference. */&#13;
${:import(org.apache.log4j.Logger)}private static final Logger LOGGER = Logger.getLogger(${enclosing_type}.class);&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Override readObject" enabled="true" name="readObject">    /**&#13;
     * Read this object from a stream.&#13;
     *&#13;
     * @param in The input stream.&#13;
     * @throws java.io.IOException If de-serialization fails.&#13;
     */&#13;
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException&#13;
    {&#13;
        ${cursor}&#13;
    }&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Insert a private default constructor." enabled="true" name="private_constructor">/** Disallow instantiation. */&#13;
private ${primary_type_name}()&#13;
{&#13;
}</template><template autoinsert="true" context="java" deleted="false" description="Insert a serialVersionUID." enabled="true" name="serialVersionUID">/** Serial version UID. */
private static final long serialVersionUID = 1L;</template><template autoinsert="true" context="java" deleted="false" description="Insert singleton methods" enabled="true" name="singleton">/** Singleton reference. */&#13;
private static final ${enclosing_type} ourInstance = new ${enclosing_type}();&#13;
&#13;
/**&#13;
 * Private constructor to enforce singleton pattern.&#13;
 */&#13;
private ${enclosing_type}()&#13;
{&#13;
}&#13;
&#13;
/**&#13;
 * Get a reference to the ${enclosing_type}.&#13;
 * @return the singleton instance&#13;
 */&#13;
public static ${enclosing_type} getInstance()&#13;
{&#13;
	return ourInstance;&#13;
}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="time code execution" enabled="true" name="time">long ${s:newName} = System.nanoTime();&#13;
${cursor}&#13;
long ${e:newName} = System.nanoTime();&#13;
LOGGER.trace(StringUtilities.formatTimingMessage("Time elapsed: ", ${e} - ${s}));</template><template autoinsert="true" context="java" deleted="false" description="Override writeObject" enabled="true" name="writeObject">    /**&#13;
     * Write this object to a stream.&#13;
     *&#13;
     * @param out The output stream.&#13;
     * @throws java.io.IOException If serialization fails.&#13;
     */&#13;
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException&#13;
    {&#13;
        ${cursor}&#13;
    }&#13;
</template></templates>